let {users, movies, notifications} = require('../dataBase/data')const IMDb = require("imdb-light");const {v4: uuid} = require("uuid");module.exports = {    registration: (req, res, next) => {        const {user, passOne, passTwo} = req.body        if (!(user.length >= 4 && user.length <= 20)) return res.send({success: false, message: 'Check username'})        const isUser = (users.find(x => x.user === user))        if (!!isUser) return res.send({success: false, message: 'User exits'})        if (!(passOne.length >= 4 && passOne.length <= 20 && passOne === passTwo)) return res.send({            success: false,            message: 'Check passwords'        })        next()    },    checkUser: (req, res, next) => {        const {user, pass, time} = req.body        if (!(user.length >= 4 && user.length <= 20)) return res.send({success: false, message: 'Check username'})        if (!(pass.length >= 4 && pass.length <= 20)) return res.send({success: false, message: 'Check password'})        const isUser = users.find(x => x.user === user && x.password === pass)        if (!isUser) return res.send({success: false, message: "No such user"})        const userMovies = movies.filter(x => x.createdBy === user)        const lastCommented = userMovies.filter(x => x.commentTime > isUser.lastCon)        for (const com of lastCommented) {            for (const review of com.reviews) {                if ((Number(review.time) > Number(isUser.lastCon) && Number(review.time) < Number(time)) && review.user !== user) notifications.push({                    poster: com.poster,                    title: com.title,                    id: com.id,                    review                })            }        }        next()    },    fetchData: (req, res, next) => {        const {title, creator} = req.body        const user = users.find(x => x.id === creator)        function fetch(id) {            return new Promise(function (resolve, reject) {                IMDb.fetch(id, (details) => {                    resolve(details);                });            });        }        async function test(id) {            const quote = await fetch(id);            return quote        }        test(title).then(res => {            const id = uuid()            const newMovie = {                title: res.Title,                year: res.Year,                rating: res.Rating,                genres: res.Genres,                writers: res.Writers,                poster: res.Poster,                id,                createdBy: user.user,                reviews: [],            }            movies.unshift(newMovie)            next()        })    },    checkComments: (req, res, next) => {        const {movieId, comment, creator} = req.body        const movie = movies.find(x => x.id === movieId)        if (!(!!movie)) return res.send({success: false})        next()    },}